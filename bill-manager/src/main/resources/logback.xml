<?xml version="1.0" encoding="UTF-8" ?>
<!--
    configuration:
        - scan: 当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
        - scanPeriod: 设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。
            （单位可以是：milliseconds, seconds, minutes or hours，默认为：milliseconds）
        - debug: 当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。
        * property : 定义变量值
        * contextName: 设置上下文名称
        * timestamp： 获取时间戳字符串
        * appender： 配置输出源
        * logger： 配置logger
        * root: 配置根logger,输出日志是从子节点开始，子节点如果有输出源直接输入，如果无，判断配置的addtivity，是否像上级传递，即是否向root传递，传递则采用root的输出源，否则不输出日志
-->
<configuration scan="true" scanPeriod="60 seconds" debug="false">

    <!--
        property: 用来定义变量值,可以使“${变量名}”来使用变量
            - name: 变量名
            - value: 变量值
    -->
    <property name="APP_Name" value="myAppName"/>

    <!--
        contextName: 用来设置上下文名称，每个logger都关联到logger上下文，默认上下文名称为default;一旦设置，不能修改
    -->
    <contextName>myAppName</contextName>

    <!--
        timestamp: 获取时间戳字符串，他有两个属性key和datePattern
            - key: 标识此<timestamp> 的名字；
            - datePattern: 设置将当前时间（解析配置文件的时间）转换为字符串的模式，遵循java.txt.SimpleDateFormat的格式。
     -->
    <timestamp key="testTime" datePattern="yyyy-MM-dd hhmmss"></timestamp>

    <!--
        appender: 负责写日志的组件
            - name: 指定appender名称
            - class: appender的全限定名
        常用appender:
            1.ConsoleAppender:把日志输出到控制台
            2.FileAppender：把日志添加到文件
            3.RollingFileAppender：滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件
            4.其他：SocketAppender、SMTPAppender、DBAppender、SyslogAppender、SiftingAppender
    -->

    <!--
        ConsoleAppender: 把日志输出到控制台
            * encoder: 对日志进行格式化
                - pattern:
            * target: 字符串System.out(默认)或者System.err
    -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>%-4relative [%thread] %-5level %logger{35} - %msg %n</pattern>
        </encoder>
    </appender>

    <!--
        FileAppender: 把日志添加到文件
        * file: 被写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建，没有默认值。
        * append: 如果是 true，日志被追加到文件结尾，如果是 false，清空现存文件，默认是true。
        * encoder: 对日志进行格式化
                - pattern:
        * prudent: 如果是 true，日志会被安全的写入文件，即使其他的FileAppender也在向此文件做写入操作，效率低，默认是 false。
    -->
    <appender name="FILE" class="ch.qos.logback.core.FileAppender">
        <file>testFile.log</file>
        <append>true</append>
        <encoder>
            <pattern>%-4relative [%thread] %-5level %logger{35} - %msg %n</pattern>
        </encoder>
    </appender>

    <!--
       RollingFileAppender: 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件
       * file: 被写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建，没有默认值。
       * append: 如果是 true，日志被追加到文件结尾，如果是 false，清空现存文件，默认是true。
       * encoder: 对日志进行格式化
               - pattern:
       * rollingPolicy: 当发生滚动时，决定RollingFileAppender的行为，涉及文件移动和重命名
               - class: 定义具体的滚动策略类
               * fileNamePattern: 必要节点，包含文件名及“%d”转换符，“%d”可以包含一个java.text.SimpleDateFormat指定的时间格式，如：%d{yyyy-MM}
               * maxHistory: 控制保留的归档文件的最大数量，超出数量就删除旧文件
               * maxFileSize: 活动文件的大小，默认值是10MB
               * prudent: 当为true时，不支持FixedWindowRollingPolicy。支持TimeBasedRollingPolicy，但是有两个限制，1不支持也不允许文件压缩，2不能设置file属性，必须留空
       * prudent: 如果是 true，日志会被安全的写入文件，即使其他的FileAppender也在向此文件做写入操作，效率低，默认是 false。
       * triggeringPolicy :告知 RollingFileAppender 合适激活滚动
                * minIndex: 窗口索引最小值
                * maxIndex: 窗口索引最大值，当用户指定的窗口过大时，会自动将窗口设置为12。
                * fileNamePattern:必须包含“%i”例如，假设最小值和最大值分别为1和2，命名模式为 mylog%i.log,会产生归档文件mylog1.log和mylog2.log。还可以指定文件压缩选项，例如，mylog%i.log.gz 或者 没有log%i.log.zip
    -->
    <appender name="RollingFILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>testFile.log</file>
        <append>true</append>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>logFile.%d{yyyy-MM-dd}.log</fileNamePattern>
            <maxHistory>30</maxHistory>
        </rollingPolicy>
        <encoder>
            <pattern>%-4relative [%thread] %-5level %logger{35} - %msg %n</pattern>
        </encoder>
    </appender>


    <!--
        logger: 用来设置某一个包或具体的某一个类的日志打印级别、以及指定<appender>
            - name :用来指定受此loger约束的某一个包或者具体的某一个类
            - level: 用来设置打印级别，大小写无关 TRACE, DEBUG, INFO, WARN, ERROR, ALL和OFF
            - addtivity: 是否向上级loger传递打印信息。默认是true
            * appender-ref：
    -->
    <logger name="" level="DEBUG"></logger>

    <!--
        root: 根logger,所用logger的上级（至多只能配置一个root）
            - level : 用来设置打印级别，大小写无关,TRACE, DEBUG, INFO, WARN, ERROR, ALL和OFF，不能设置为INHERITED或者同义词NULL。 默认是DEBUG
            * appender-ref：
    -->
    <root level="DEBUG">
        <appender-ref ref="STDOUT"/>
    </root>
</configuration>